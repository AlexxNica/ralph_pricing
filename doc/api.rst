===
API
===
For improve work and communication with scrooge we prepared api. Currently, there is only push api implemented and can be used to push usages data by services. In the future we are planning to create pull api for getting report data only for single venture/service. To communicate with API use JSON as a message format and REST API for maintenance of communication standards.

Push API
~~~~~~~~

.. image:: images/push_api.png

-------------------
General description
-------------------

Every service can upload data to Scrooge with usages of it's resources (ex. requests count, transfer etc) by ventures. To upload data to Scrooge some preconditions must be satisfied:

* usage type(s) used by service must be added to Scrooge
* service has to be added to Scrooge
* usage type(s) must be connected with service

For every service in Scrooge unique symbol has to be provided, which is later used to identify service through API. Venture and usage type(s) are also identified using theirs symbols.

Unit of resource usage doesn't matter (ex. in case of transfer kB, MB, GB) - the most important thing is to keep unit of every usage the same (even abstract) - after all, cost of service is distributed to ventures proportionally to their usages (of resources).

If service has more than one usage type, theirs percentage division in period of time has to be provided (ex. transfer - 30%, requests count - 70%, which means, that 30% of total cost of service is distributed proportionally to transfer usage and 70% proportionally to requests count).

---------------------
How-to (step-by-step)
---------------------
.. _user-api-label:

1. (General) Ralph Admin part

  a. Create user or use the account that is already provided for your service.
  b. Log-in to Ralph using technical user credentials and find out what is your API Key (RALPH_URL/user/preferences/api_key)

2. Scrooge Admin part

  a. Create Usage Type(s) (one or more) that reflect resources used by service (RALPH_URL/admin/ralph_pricing/usagetype/add/). Every service usage type must have unique symbol.

    * Leave 'Show usage type in report' Checked.
    * Type: select 'Service usage type'.

  b. Create Service (RALPH_URL/admin/ralph_pricing/service/add/). Every service must have unique symbol, that will be later used to identify service in API message. Possible options for service:

    * Base usage types - what base usage types will be used to calculate cost of service (if you don't know what to select, select all).
    * Dependency - using this field you can select dependent services (part of dependent service cost (cost of dependent service that is generated by current service ventures) will be included in total service cost)
    * Use universal plugin - if your service does not have dedicated plugin, keep this option checked
    * Ventures - ventures, that provide service (ventures, in which are physical or virtual machines that are used by service)
    * Service usage types - here you have to select usage types created in previous step. Notice that only usage types with type 'Service usage type' are presented here. If you have only one usage type for your service, select it and type 100 in it's percent field.

3. API usage part

  Send JSON message to API endpoint (RALPH_URL/scrooge/api/v0.9/serviceusages/) with data in format described in :ref:`technical-label` section.

.. _technical-label:

---------------------
Technical description
---------------------

""""""""""""""
API definition
""""""""""""""
::

  {
    "service": "<service_symbol>",
    "date": "<date>",
    "overwrite": "<delete_all_previous|values_only|no>",
    "venture_usages": [
      {
        "venture": "<venture_symbol>",
        "usages": [
          {
            "symbol": "<usage_type_1_symbol>",
            "value": <usage1>
          },
          ...
        ]
      },
      ...
    ]
  }


Example::

  {
    "service": "service_symbol",
    "date": "2111-11-11",
    "overwrite": "delete_all_previous",
    "venture_usages": [
      {
        "venture": "venture1",
        "usages": [
          {
            "symbol": "requests",
            "value": 123
          },
          {
            "symbol": "transfer",
            "value": 321
          }
        ]
      },
      {
        "venture": "venture2",
        "usages": [
          {
            "symbol": "requests",
            "value": 543
          },
          {
            "symbol": "transfer",
            "value": 565
          }
        ]
      },
      {
        "venture": "venture3",
        "usages": [
          {
            "symbol": "requests",
            "value": 788
          },
          {
            "symbol": "transfer",
            "value": 234
          }
        ]
      }
    ]
  }

"""""""""""""
Communication
"""""""""""""

Communication with Scrooge API take place using HTTP protocol. Data should be sent with POST request. Authentication in done using HTTP header ``Authorization: ApiKey <username>:<api_key>``, where api_key is key generated to user in Ralph (see :ref:`Ralph Admin part <user-api-label>`).

"""""""""""""""""""""""""""
Overwriting previous values
"""""""""""""""""""""""""""

API provides way to define how to treat previous service usages values uploaded for given date (ex. when data is sent twice for given date). Possible behavior (overwrite) is:

* ``delete_all_previous`` - all previous usages for given date are removed before inserting new data
* ``values_only`` (default) - previously uploaded usages are overwritten by new values
* ``no`` - any usage is removed - new usages are appended to old ones

Example: first sent data package is (A:1, B:2), the next one is (B:3, C:4) - final data will be as follows:

* ``delete_all_previous`` - (B:3, C:4)
* ``values_only`` (default) - (A:1, B:3, C:4)
* ``no`` - (A:1, B:2, B:3, C:4) (cumulatively: B:5)

Default behaviour (when overwrite is not passed) is 'values_only'.

"""""""""""""""""""""""""""""""
Possible responses (HTTP codes)
"""""""""""""""""""""""""""""""

201 - everything ok, data saved properly.

400 - invalid symbol (of venture, usage type or service).

401 - authorization/authentication error.

500 - error on server side during processing data.


Pull API
~~~~~~~~

Coming soon...
